import { useState, useEffect } from 'react';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ–Ω—Ç–æ—Ä–∞
export enum MessageType {
  User = 'user',
  Mentor = 'mentor',
  System = 'system',
}

export interface Message {
  id: string;
  text: string;
  type: MessageType;
  timestamp: number;
  attachedData?: any;
}

export interface Persona {
  id: string;
  name: string;
  description: string;
  icon: string;
}

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const mockPersonas: Persona[] = [
  {
    id: 'commander',
    name: '–ö–æ–º–∞–Ω–¥–∏—Ä',
    description: '–ñ–µ—Å—Ç–∫–∏–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω—Ç–æ—Ä —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
    icon: 'üëä'
  },
  {
    id: 'strategist',
    name: '–°—Ç—Ä–∞—Ç–µ–≥',
    description: '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ —Å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º –≤–∏–¥–µ–Ω–∏–µ–º –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–º –º—ã—à–ª–µ–Ω–∏–µ–º',
    icon: 'üß†'
  },
  {
    id: 'catalyst',
    name: '–ö–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä',
    description: '–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –±–∞—Ä—å–µ—Ä–æ–≤',
    icon: '‚ö°'
  },
  {
    id: 'architect',
    name: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä',
    description: '–ú–µ—Ç–æ–¥–∏—á–Ω—ã–π, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤',
    icon: 'üèóÔ∏è'
  }
];

const mockMessages: Message[] = [
  {
    id: '1',
    text: '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-–º–µ–Ω—Ç–æ—Ä. –†–∞—Å—Å–∫–∞–∂–∏, –Ω–∞–¥ –∫–∞–∫–∏–º–∏ —Ü–µ–ª—è–º–∏ —Ç—ã —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—à—å?',
    type: MessageType.Mentor,
    timestamp: Date.now() - 86400000
  },
  {
    id: '2',
    text: '–Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ MVP –¥–ª—è —Å–≤–æ–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Ö–æ—á—É —É–ª—É—á—à–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É',
    type: MessageType.User,
    timestamp: Date.now() - 86000000
  },
  {
    id: '3',
    text: '–•–æ—Ä–æ—à–æ. –î–ª—è MVP –≤–∞–∂–Ω–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –∏ —á–µ—Ç–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ß—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, –ø—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞—á–∞—Ç—å —Å –Ω–µ–±–æ–ª—å—à–∏—Ö, –Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤. –ö–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ —Ç—ã —É–∂–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è–ª?',
    type: MessageType.Mentor,
    timestamp: Date.now() - 85800000
  }
];

export function useMentorData() {
  const [messages, setMessages] = useState<Message[]>(mockMessages);
  const [personas, setPersonas] = useState<Persona[]>(mockPersonas);
  const [selectedPersonaId, setSelectedPersonaId] = useState<string>('commander');
  const [loading, setLoading] = useState(false);
  
  // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    setLoading(true);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
    const timer = setTimeout(() => {
      setMessages(mockMessages);
      setPersonas(mockPersonas);
      setLoading(false);
    }, 1000);
    
    return () => clearTimeout(timer);
  }, []);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä—É
  const sendMessage = (text: string): void => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessage: Message = {
      id: Date.now().toString(),
      text,
      type: MessageType.User,
      timestamp: Date.now()
    };
    
    setMessages(prevMessages => [...prevMessages, userMessage]);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –º–µ–Ω—Ç–æ—Ä–∞
    setLoading(true);
    
    setTimeout(() => {
      const mentorMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: generateMentorResponse(text, selectedPersonaId),
        type: MessageType.Mentor,
        timestamp: Date.now() + 1
      };
      
      setMessages(prevMessages => [...prevMessages, mentorMessage]);
      setLoading(false);
    }, 1500);
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω—ã –º–µ–Ω—Ç–æ—Ä–∞
  const setPersona = (personaId: string): void => {
    setSelectedPersonaId(personaId);
    
    const selectedPersona = personas.find(p => p.id === personaId);
    if (selectedPersona) {
      const systemMessage: Message = {
        id: Date.now().toString(),
        text: `–ü–µ—Ä—Å–æ–Ω–∞ –º–µ–Ω—Ç–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "${selectedPersona.name}"`,
        type: MessageType.System,
        timestamp: Date.now()
      };
      
      setMessages(prevMessages => [...prevMessages, systemMessage]);
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
  const startVoiceInput = (): void => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞
    console.log('–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞');
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
  const stopVoiceInput = (): void => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏
    console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞');
    
    // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
    setTimeout(() => {
      sendMessage('–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞');
    }, 1000);
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞
  const clearConversation = (): void => {
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const welcomeMessage: Message = {
      id: Date.now().toString(),
      text: '–î–∏–∞–ª–æ–≥ –æ—á–∏—â–µ–Ω. –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?',
      type: MessageType.Mentor,
      timestamp: Date.now()
    };
    
    setMessages([welcomeMessage]);
  };
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω—Ç–æ—Ä–∞
  const generateMentorResponse = (userText: string, personaId: string): string => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ AI API
    
    // –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä—Å–æ–Ω—ã
    const responses: Record<string, string[]> = {
      'commander': [
        '–ö–æ–Ω–∫—Ä–µ—Ç–∏–∑–∏—Ä—É–π —Ü–µ–ª—å. –ö–∞–∫–∏–µ —Ç–æ—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Å–ø–µ—Ö–∞?',
        '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ ‚Äî —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ, –∞ –Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ö–∞–∫–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å —Å–µ–≥–æ–¥–Ω—è?',
        '–ß–µ—Ç–∫–∏–π –ø–ª–∞–Ω –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π. –†–∞–∑–±–µ–π –∑–∞–¥–∞—á—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç—Ç–∞–ø—ã.'
      ],
      'strategist': [
        '–î–∞–≤–∞–π —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–æ. –ö–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é?',
        '–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –≤–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Ç–≤–æ–∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏? –ö–∞–∫ –∏–º–µ–Ω–Ω–æ?',
        '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –∫–∞–∫ —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –¥—Ä—É–≥–∏–µ –∞—Å–ø–µ–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞.'
      ],
      'catalyst': [
        '–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–µ–π—á–∞—Å? –î–∞–≤–∞–π —ç—Ç–æ –ø—Ä–µ–æ–¥–æ–ª–µ–µ–º!',
        '–û—Ç–ª–∏—á–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Ä—ã–≤–∫–∞! –ö–∞–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã —Ç–µ–±–µ –Ω—É–∂–Ω—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è?',
        '–≠–Ω–µ—Ä–≥–∏—è —Å–ª–µ–¥—É–µ—Ç –∑–∞ —Ñ–æ–∫—É—Å–æ–º. –ù–∞ —á–µ–º –Ω—É–∂–Ω–æ —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è?'
      ],
      'architect': [
        '–î–∞–≤–∞–π –¥–µ—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É. –ö–∞–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏?',
        '–ö–∞—á–µ—Å—Ç–≤–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ì–¥–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É–∑–∫–∏–µ –º–µ—Å—Ç–∞?',
        '–ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É —ç—Ç–∞–ø–æ–≤ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏.'
      ]
    };
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–µ—Ä—Å–æ–Ω—ã
    const personaResponses = responses[personaId] || responses['commander'];
    const randomIndex = Math.floor(Math.random() * personaResponses.length);
    
    return personaResponses[randomIndex];
  };
  
  return {
    messages,
    personas,
    selectedPersonaId,
    loading,
    sendMessage,
    setPersona,
    startVoiceInput,
    stopVoiceInput,
    clearConversation
  };
}